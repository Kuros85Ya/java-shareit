-- users : id , name , email
drop table if exists bookings;
drop table if exists comments;
drop table if exists items;
drop table if exists requests;
drop table if exists users;

create table if not exists users
(
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar not null,
    email varchar unique not null
);

comment on table users is 'Пользователи приложения';
comment on column users.id is 'Идентификатор пользователя';
comment on column users.name is 'Имя пользователя';
comment on column users.email is 'Уникальный мейл пользователя';
--requests : id , description , requestor_id
create table if not exists requests
(
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created timestamp default now(),
    description varchar not null,
    requestor_id BIGINT not null references users(id)
);

comment on table requests is 'Запросы на потенциальное бронирование вещи';
comment on column requests.id is 'Идентификатор запроса';
comment on column requests.created is 'Дата создания запроса';
comment on column requests.description is 'Описание запроса';
comment on column requests.requestor_id is 'Идентификатор пользователя, отправляющего запрос';

--items : id , name , description , is_available , owner_id , request_id
create table if not exists items
(
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar not null,
    description varchar not null,
    is_available bool not null default true,
    owner_id BIGINT not null,
    request_id BIGINT default null,

    CONSTRAINT fk_items_to_users FOREIGN KEY(owner_id) REFERENCES users(id), UNIQUE(id, name, owner_id),
    CONSTRAINT fk_items_to_requests FOREIGN KEY(request_id) REFERENCES requests(id)
);

create index if not exists item_idx
    on items (name, description, owner_id);

comment on table items is 'Вещи пользователей';
comment on column items.id is 'Идентификатор вещи';
comment on column items.name is 'Название вещи';
comment on column items.description is 'Описание вещи';
comment on column items.is_available is 'Доступность вещи для взятия в аренду';
comment on column items.owner_id is 'Идентификатор хозяина вещи из таблицы users';
comment on column items.request_id is 'Идентификатор запроса';

--bookings : id , start_date , end_date , item_id , booker_id , status

create table if not exists bookings
(
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    start_date timestamp default now() not null,
    end_date timestamp default '9999-01-01' not null,
    item_id BIGINT not null,
    booker_id BIGINT not null,
    status text not null default 'WAITING',
    created timestamp not null default now(),
    foreign key (item_id) references items(id) on delete restrict,
    foreign key (booker_id) references users(id) on delete restrict
);

create index if not exists bookings_idx
    on bookings (start_date, end_date, item_id, booker_id);

comment on table bookings is 'Бронирования';
comment on column bookings.id is 'Идентификатор бронирования';
comment on column bookings.start_date is 'Дата начала аренды';
comment on column bookings.end_date is 'Дата окончания аренды';
comment on column bookings.item_id is 'Идентификатор вещи';
comment on column bookings.booker_id is 'Идентификатор пользователя, который берет аренду';
comment on column bookings.status is 'Статус аренды';

--comments : id , text , item_id , author_id
create table if not exists comments
(
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    text varchar not null,
    item_id BIGINT not null,
    author_id BIGINT not null,
    created timestamp default now(),

    foreign key (item_id) references items(id) on delete restrict,
    foreign key (author_id) references users(id) on delete restrict
);

create index if not exists comments_idx on comments (text, item_id, author_id);

comment on table comments is 'Отзывы пользователей';
comment on column comments.id is 'Идентификатор отзыва';
comment on column comments.text is 'Описание запроса';
comment on column comments.item_id is 'Идентификатор пользователя, отправляющего запрос';
comment on column comments.author_id is 'Идентификатор пользователя, отправляющего запрос';
comment on column comments.created is 'Дата создания комментария';